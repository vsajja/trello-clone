buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'gradle.plugin.io.ratpack:ratpack-gradle:1.4.4'
        classpath 'org.postgresql:postgresql:9.4-1206-jdbc42'
        classpath 'org.jooq:jooq-codegen:3.7.1'
    }
}

plugins {
    id 'io.ratpack.ratpack-groovy' version '1.4.4'
}

repositories {
    jcenter()
}

dependencies {
    compile 'org.postgresql:postgresql:9.4-1205-jdbc42'
    compile 'org.jooq:jooq:3.7.1'
    compile 'org.pac4j:pac4j-http:1.8.5'
    compile 'org.mindrot:jbcrypt:0.4'
    compile ratpack.dependency('hikari')
    compile ratpack.dependency('pac4j')

    runtime 'org.slf4j:slf4j-simple:1.7.12'

    testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude module: 'groovy-all'
    }
    testCompile ratpack.dependency('groovy-test')
}

task stage {
    dependsOn installDist
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

import org.jooq.util.jaxb.*
import org.jooq.util.*

task jooqCodegen {
    doLast {
        Properties props = new Properties()
        props.load(new FileInputStream('src/ratpack/db.properties'))

        Configuration configuration = new Configuration()
                .withJdbc(new Jdbc()
                .withDriver('org.postgresql.Driver')
                .withProperties([new Property()
                                         .withKey('ssl')
                                         .withValue('true'),
                                 new Property()
                                         .withKey('sslfactory')
                                         .withValue('org.postgresql.ssl.NonValidatingFactory')])
                .withUrl("jdbc:postgresql://${props.get('postgres.serverName')}:${props.get('postgres.portNumber')}/${props.get('postgres.databaseName')}")
                .withUser(props.get('postgres.user'))
                .withPassword(props.get('postgres.password')))
                .withGenerator(new org.jooq.util.jaxb.Generator()
                .withGenerate(new Generate()
                .withImmutablePojos(true)
                .withPojosEqualsAndHashCode(true)
                .withDaos(true)
                .withFluentSetters(true))
                .withDatabase(new org.jooq.util.jaxb.Database()
                .withName('org.jooq.util.postgres.PostgresDatabase')
                .withIncludes('.*')
                .withExcludes('')
                .withInputSchema('public'))
                .withTarget(new Target()
                .withPackageName('jooq.generated')
                .withDirectory('src/main/java')))
        GenerationTool.generate(configuration)
    }
}
