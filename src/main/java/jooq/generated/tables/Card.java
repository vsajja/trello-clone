/**
 * This class is generated by jOOQ
 */
package jooq.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.generated.Keys;
import jooq.generated.Public;
import jooq.generated.tables.records.CardRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Card extends TableImpl<CardRecord> {

	private static final long serialVersionUID = 483250027;

	/**
	 * The reference instance of <code>public.card</code>
	 */
	public static final Card CARD = new Card();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<CardRecord> getRecordType() {
		return CardRecord.class;
	}

	/**
	 * The column <code>public.card.card_id</code>.
	 */
	public final TableField<CardRecord, Integer> CARD_ID = createField("card_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.card.name</code>.
	 */
	public final TableField<CardRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.card.description</code>.
	 */
	public final TableField<CardRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR, this, "");

	/**
	 * The column <code>public.card.list_id</code>.
	 */
	public final TableField<CardRecord, Integer> LIST_ID = createField("list_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>public.card</code> table reference
	 */
	public Card() {
		this("card", null);
	}

	/**
	 * Create an aliased <code>public.card</code> table reference
	 */
	public Card(String alias) {
		this(alias, CARD);
	}

	private Card(String alias, Table<CardRecord> aliased) {
		this(alias, aliased, null);
	}

	private Card(String alias, Table<CardRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<CardRecord, Integer> getIdentity() {
		return Keys.IDENTITY_CARD;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<CardRecord> getPrimaryKey() {
		return Keys.CARD_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<CardRecord>> getKeys() {
		return Arrays.<UniqueKey<CardRecord>>asList(Keys.CARD_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<CardRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<CardRecord, ?>>asList(Keys.CARD__CARD_BOARD_LIST_LIST_ID_FK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Card as(String alias) {
		return new Card(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Card rename(String name) {
		return new Card(name, null);
	}
}
